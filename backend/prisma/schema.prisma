// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional, only needed for migrations
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      Role     @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin     DateTime?
  streakCount   Int       @default(0)
  maxStreakCount Int      @default(0)
  
  // Firebase authentication fields
  firebaseUid    String?  @unique
  authProvider   String?

  // Profile information
  gender         Gender?
  dateOfBirth    DateTime?
  bio            String?
  githubProfile  String?
  linkedinProfile String?

  problems       Problem[]
  submissions    Submission[]
  solvedProblems ProblemSolved[]
  Playlists      Playlist[]
  discussions     Discussion[]
  discussionLikes DiscussionLike[]

  Revision Revision[]
}

model Problem {
  id          String     @id @default(uuid())
  
  // Original LeetCode fields
  leetcodeId     Int?      @unique  // Original LeetCode problem ID
  title          String
  description    String
  difficulty     Difficulty
  isPremium      Boolean   @default(false)
  solutionLink   String?
  acceptanceRate Float?
  frequency      Float?
  url            String?
  discussCount   Int?
  accepted       Int?
  submissions    Int?
  companies      String[]  // JSON array of companies
  relatedTopics  String[]  // JSON array of related topics  
  likes          Int?
  dislikes       Int?
  rating         Float?
  askedByFaang   Boolean   @default(false)
  similarQuestions String? // JSON string of similar questions
  
  // Existing fields for custom problems
  tags        String[]
  companyTags String[]
  userId      String?   // Make optional for LeetCode problems
  examples    Json?     // Make optional for LeetCode problems
  constraints String?
  hints       String?
  editorial   String?

  testcases          Json?  // Make optional for LeetCode problems
  codeSnippets       Json?  // Make optional for LeetCode problems
  referenceSolutions Json?  // Make optional for LeetCode problems

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission       Submission[]
  solvedBy         ProblemSolved[]
  problemsPlaylist ProblemPlaylist[]
  discussions Discussion[]

  Revision Revision[]
}

model Submission {
  id            String   @id @default(uuid())
  problemId     String
  userId        String
  sourceCode    Json
  language      String 
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //Relations
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  problems    ProblemPlaylist[]
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // Unique playlist name for each user
}

model ProblemPlaylist {
  id         String   @id @default(uuid())
  problemId  String
  playlistId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, playlistId]) // Unique problem in each playlist
}

model Revision {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
  @@index([userId])
}

model Discussion {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Optional: Parent discussion for replies
  parentId String?
  parent   Discussion? @relation("DiscussionReplies", fields: [parentId], references: [id])
  replies  Discussion[] @relation("DiscussionReplies")
  
  // Optional: Likes/votes
  likes    DiscussionLike[]
  
  @@map("discussions")
}

model DiscussionLike {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([discussionId, userId])
  @@map("discussion_likes")
}